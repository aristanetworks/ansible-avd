{# Set Spine Variables #}
{% set switch.platform = spine.platform %}
{% set switch.mgmt_ip = spine.nodes[inventory_hostname].mgmt_ip %}
{% set switch.spanning_tree_mode = "none" %}
{# Set switch.underlay_routing_protocol using external logic template #}
{% include 'logic/switch-underlay-routing-protocol.j2' %}
{# Set switch.overlay_routing_protocol using external logic template #}
{% include 'logic/switch-overlay-routing-protocol.j2' %}
{% if bgp_as is arista.avd.defined and switch.overlay_routing_protocol == 'ibgp' %}
{%     set switch.bgp_as = bgp_as %}
{% else %}
{%     set switch.bgp_as = spine.bgp_as | arista.avd.default() %}
{% endif %}
{% set switch.router_id = overlay_loopback_network_summary | ipaddr('network') | ipmath(spine.nodes[inventory_hostname].id) %}
{% set switch.bgp_defaults = spine_bgp_defaults | arista.avd.default([]) %}
{# Logic for EVPN Role for Overlay BGP Peerings #}
{# For spine the default value is server #}
{% set switch.evpn_role = spine.nodes[inventory_hostname].evpn_role | arista.avd.default(
                          'server') %}
{% set switch.raw_evpn_route_servers = spine.nodes[inventory_hostname].evpn_route_servers | arista.avd.default(
                                       []) %}
{# Set switch.evpn_route_servers using external logic template #}
{% include 'designs/l3ls-evpn/logic/switch-evpn-route-servers.j2' %}
{# Set switch.evpn_route_clients using external logic template #}
{% include 'designs/l3ls-evpn/logic/switch-evpn-route-clients.j2' %}
{# Set switch.l3_edge_* variables using external logic template #}
{% include 'l3_edge/logic/switch-l3-edge.j2' %}