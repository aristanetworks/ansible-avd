router_bgp:

  peer_groups:
    {{ bgp_peer_groups.EVPN_OVERLAY_PEERS.name | arista.avd.default("EVPN-OVERLAY-PEERS") }}:
      type: evpn
      update_source: Loopback0
      bfd: true
      ebgp_multihop: "{{ evpn_ebgp_multihop }}"
      password: "{{ bgp_peer_groups.EVPN_OVERLAY_PEERS.password }}"
      send_community: all
      maximum_routes: 0
{%     if switch.evpn_role == "server" %}
      next_hop_unchanged: true
{%     endif %}

  address_family_ipv4:
    peer_groups:
      {{ bgp_peer_groups.EVPN_OVERLAY_PEERS.name | arista.avd.default("EVPN-OVERLAY-PEERS") }}:
        activate: false

  address_family_evpn:
    peer_groups:
      {{ bgp_peer_groups.EVPN_OVERLAY_PEERS.name | arista.avd.default("EVPN-OVERLAY-PEERS") }}:
        activate: true

{% if evpn_overlay_bgp_rtc is arista.avd.defined(true) %}
  address_family_rtc:
    peer_groups:
      {{ bgp_peer_groups.EVPN_OVERLAY_PEERS.name | arista.avd.default("EVPN-OVERLAY-PEERS") }}:
        activate: true
{%     if switch.evpn_role == "server" %}
        default_route_target:
          only: true
{%     endif %}
{% endif %}

{# EBGP #}
{# Overlay network peering #}
  neighbors:
{% for evpn_route_server in overlay_data.evpn_route_servers | arista.avd.natural_sort %}
    {{ overlay_data.evpn_route_servers[evpn_route_server].ip_address }}:
      peer_group: {{ bgp_peer_groups.EVPN_OVERLAY_PEERS.name | arista.avd.default("EVPN-OVERLAY-PEERS") }}
      description: {{ evpn_route_server }}
      remote_as: {{ overlay_data.evpn_route_servers[evpn_route_server].bgp_as }}
{%     if evpn_prevent_readvertise_to_server is arista.avd.defined(true) %}
      route_map_out: RM-EVPN-FILTER-AS{{ overlay_data.evpn_route_servers[evpn_route_server].bgp_as }}
{%     endif %}
{% endfor %}
{% for evpn_route_client in overlay_data.evpn_route_clients | arista.avd.natural_sort %}
    {{ overlay_data.evpn_route_clients[evpn_route_client].ip_address }}:
      peer_group: {{ bgp_peer_groups.EVPN_OVERLAY_PEERS.name | arista.avd.default("EVPN-OVERLAY-PEERS") }}
      description: {{ evpn_route_client }}
      remote_as: {{ overlay_data.evpn_route_clients[evpn_route_client].bgp_as }}
{% endfor %}
{% if switch.evpn_role == "sndbfasjf" and underlay_rfc5549 is arista.avd.defined(true)%}
{%     for l3leaf_node_group in l3leaf.node_groups | arista.avd.natural_sort %}
{%         if l3leaf.node_groups[l3leaf_node_group].spines is defined %}
{%             set leaf_spines = l3leaf.node_groups[l3leaf_node_group].spines %}
{%         else %}
{%             set leaf_spines = l3leaf.defaults.spines %}
{%         endif %}
{%         for node in l3leaf.node_groups[l3leaf_node_group].nodes | arista.avd.natural_sort %}
{#    erlay network peering #}
{%             for leaf_spine in leaf_spines %}
{%                 if leaf_spine == inventory_hostname %}
    {{ l3leaf.node_groups[l3leaf_node_group].nodes[node].spine_interfaces[loop.index0] }}:
      peer_group: {{ bgp_peer_groups.EVPN_OVERLAY_PEERS.name | arista.avd.default("EVPN-OVERLAY-PEERS") }}
      remote_as: {{ l3leaf.node_groups[l3leaf_node_group].nodes[node].bgp_as | arista.avd.default(
                    l3leaf.node_groups[l3leaf_node_group].bgp_as,
                    l3leaf.defaults.bgp_as) }}
      description: {{ node }}_{{ l3leaf.node_groups[l3leaf_node_group].nodes[node].spine_interfaces[loop.index0] }}
{%                endif %}
{%            endfor %}
{%        endfor %}
{%    endfor %}
{% endif %}