{# Point-to-Point Interfaces to Leaf Switches #}
{% for l3leaf_node_group in l3leaf.node_groups | arista.avd.natural_sort %}
{%     if l3leaf.node_groups[l3leaf_node_group].spines is defined %}
{%         set leaf_spines = l3leaf.node_groups[l3leaf_node_group].spines %}
{%     else %}
{%         set leaf_spines = l3leaf.defaults.spines %}
{%     endif %}
{%     for node in l3leaf.node_groups[l3leaf_node_group].nodes | arista.avd.natural_sort %}
{%         set spine_interfaces = l3leaf.node_groups[l3leaf_node_group].nodes[node].spine_interfaces %}
{%         if l3leaf.node_groups[l3leaf_node_group].uplink_to_spine_interfaces is defined %}
{%             set uplink_to_spine_interfaces = l3leaf.node_groups[l3leaf_node_group].uplink_to_spine_interfaces %}
{%         else %}
{%             set uplink_to_spine_interfaces = l3leaf.defaults.uplink_to_spine_interfaces %}
{%         endif %}
{%         if l3leaf.node_groups[l3leaf_node_group].p2p_link_interface_speed is defined %}
{%             set p2p_link_interface_speed = l3leaf.node_groups[l3leaf_node_group].p2p_link_interface_speed %}
{%         elif l3leaf.defaults.spine_interface_speed is defined %}
{%             set p2p_link_interface_speed = l3leaf.defaults.p2p_link_interface_speed %}
{%         endif %}
{%         for leaf_spine in leaf_spines %}
{%             if leaf_spine == inventory_hostname %}
  {{ spine_interfaces[loop.index0] }}:
    peer: {{ node }}
    peer_interface: {{ uplink_to_spine_interfaces[loop.index0] }}
    peer_type: l3leaf
    description: P2P_LINK_TO_{{ node | upper }}_{{ uplink_to_spine_interfaces[loop.index0] }}
{%                 if p2p_link_interface_speed is defined %}
    speed: {{ p2p_link_interface_speed }}
{%                 endif %}
    mtu: {{ p2p_uplinks_mtu }}
    type: routed
    ip_address: {{ underlay_p2p_network_summary | ipaddr('network') | ipmath(((l3leaf.node_groups[l3leaf_node_group].nodes[node].id -1) * 2 * spine.nodes | length * max_l3leaf_to_spine_links ) + loop.index0 * 2) }}/31
{%                 if underlay_routing_protocol|lower == "ospf" %}
    ospf_network_point_to_point: true
    ospf_area: {{ underlay_ospf_area }}
{%                 endif %}
{%                 if underlay_routing_protocol|lower == "isis" %}
    isis_enable: EVPN_UNDERLAY
    isis_metric: 50
    isis_network_point_to_point: true
{%                 endif %}
{%             endif %}
{%         endfor %}
{%     endfor %}
{% endfor %}
{# Point-to-Point Interfaces to Super Spine Switches #}
  ### p2p Interfaces to Super Spine Switches
{% set a_spine = namespace() %}
{% set a_spine.id = spine.nodes[inventory_hostname].id %}
{# walk over spine ports defined as connections to super-spine #}
{% for port_name in spine['uplinks_to_super_spine_interfaces'] %}
{%      set link = namespace() %}
{%      set link.s_spine_number = loop.index0 // max_spine_to_super_spine_links + 1 %}
{%          for sup_spine in super_spine.nodes %}
{%              if super_spine.nodes[sup_spine].id == link.s_spine_number %}
{%                  set link.s_spine_hostname = sup_spine %}
{%                  set link.peer_interface = super_spine.spine_interfaces[pod_number-1][a_spine.id-1+(loop.index0%max_spine_to_super_spine_links)] %}
{%              endif %}
{%          endfor %}
{% set max_hosts_in_subnet = super_spine_underlay_p2p_network_summary | ipaddr('size') %}
  {{ port_name }}:
    peer: {{ link.s_spine_hostname }}
    peer_interface: {{ link.peer_interface }}
    peer_type: super-spine
    description: P2P_LINK_TO_{{ link.s_spine_hostname | upper }}_{{ link.peer_interface }}
{%              if p2p_link_interface_speed is defined %}
    speed: {{ p2p_link_interface_speed }}
{%              endif %}
    mtu: {{ p2p_uplinks_mtu }}
    type: routed
    ip_address: {{ super_spine_underlay_p2p_network_summary | ipaddr('network') | ipmath(
            ((a_spine.max_hosts_in_subnet / max_super_spines) / max_pods)|int * (pod_number-1) + loop.index0 * 2 + 1
        ) }}/31
{% endfor %}
