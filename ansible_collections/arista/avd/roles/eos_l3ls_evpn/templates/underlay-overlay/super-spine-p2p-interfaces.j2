{# Point-to-Point Interfaces to Spine Switches #}
{% set s_spine = namespace() %}
{% set s_spine.id = super_spine.nodes[inventory_hostname].id %}
{% for ports_to_specific_pod in super_spine.spine_interfaces %}
{% set pod_loop = loop %}
{%      for port_name in ports_to_specific_pod %}
{%          set link = namespace() %}
{%          set link.spine_number = loop.index0 // max_spine_to_super_spine_links + 1 %}
{# find info about connected spine #}
{%          for host in groups[dc_name] | arista.avd.natural_sort %}
{%              if hostvars[host]['type'] == 'spine' %}
{%                  if hostvars[host]['pod_number'] == pod_loop.index %}
{%                      if hostvars[host]['spine']['nodes'][host]['id'] == link.spine_number %}
{% set link.peer_interface = hostvars[host]['spine']['uplinks_to_super_spine_interfaces'][s_spine.id-1+((link.spine_number-1)%max_spine_to_super_spine_links)] %}
{% set link.ip_pool = hostvars[host]['super_spine_underlay_p2p_network_summary'] %}
{% set link.ip_pool_max_hosts_in_subnet = link.ip_pool | ipaddr('size') %}
  {{ port_name }}:
    peer: {{ host }}
    peer_interface: {{ link.peer_interface }}
    peer_type: spine
    description: P2P_LINK_TO_{{ host | upper }}_{{ link.peer_interface }}
{%              if p2p_link_interface_speed is defined %}
    speed: {{ p2p_link_interface_speed }}
{%              endif %}
    mtu: {{ p2p_uplinks_mtu }}
    type: routed
    ip_address: {{
        link.ip_pool | ipaddr('network') | ipmath(
            (link.ip_pool_max_hosts_in_subnet / max_super_spines)|int * (s_spine.id-1) + (link.spine_number-1) * 2
        )
    }}/31
{%                      endif %}
{%                  endif %}
{%              endif %}
{%          endfor %}
{%      endfor %}
{% endfor %}