---

- name: Gather Fabric MTU between directly connected interfaces
  eos_command:
    commands: "ping {{ hostvars[ethernet_interface.value.peer]['ethernet_interfaces'][ethernet_interface.value.peer_interface]['ip_address'] | ipaddr('address') }} source {{ ethernet_interface.value.ip_address  | ipaddr('address') }} size {{ (ethernet_interface.value.mtu | int) + 1000 }} df-bit repeat 1"
  loop: "{{ ethernet_interfaces | default({}, true) | dict2items }}"
  loop_control:
    loop_var: ethernet_interface
  ignore_errors: "{{ eos_validate_state_validation_mode_loose }}"
  when: |
    (ethernet_interfaces is defined and ethernet_interfaces is not none) and
    (ethernet_interface.value.type is defined and ethernet_interface.value.type is not none and ethernet_interface.value.type == 'routed') and
    (ethernet_interface.value.ip_address is defined and ethernet_interface.value.ip_address is not none) and
    (ethernet_interface.value.peer is defined and ethernet_interface.value.peer is not none) and
    (ethernet_interface.value.peer_interface is defined and ethernet_interface.value.peer_interface is not none) and
    (hostvars[ethernet_interface.value.peer]['ethernet_interfaces'][ethernet_interface.value.peer_interface]['ip_address'] is defined and
    hostvars[ethernet_interface.value.peer]['ethernet_interfaces'][ethernet_interface.value.peer_interface]['ip_address'] is not none)
  register: fabric_mtu_state
  tags:
    - fabric_mtu

- name: Validate configurated MTU is available between directly connected interfaces
  assert:
    that:
      - fabric_mtu_test.stdout[0] | regex_search("1 received")
    fail_msg: "Message too long"
    quiet: true
  loop: "{{ fabric_mtu_state.results }}"
  loop_control:
    loop_var: fabric_mtu_test
  ignore_errors: "{{ eos_validate_state_validation_mode_loose }}"
  when: ( fabric_mtu_test.skipped is not defined )
  register: fabric_mtu_results
  tags:
    - fabric_mtu
